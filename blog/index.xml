<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Akatruki</title>
    <link>//hongxuanlee.github.io/blog/index.xml</link>
    <description>Recent content in Blogs on Akatruki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Jan 2017 16:53:40 +0800</lastBuildDate>
    <atom:link href="//hongxuanlee.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的tmux常用操作</title>
      <link>//hongxuanlee.github.io/blog/tmux/</link>
      <pubDate>Tue, 24 Jan 2017 16:53:40 +0800</pubDate>
      
      <guid>//hongxuanlee.github.io/blog/tmux/</guid>
      <description>

&lt;h2 id=&#34;tmux-shortcut&#34;&gt;tmux shortcut&lt;/h2&gt;

&lt;h3 id=&#34;via-shortcut&#34;&gt;Via shortcut&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Ctrl-b s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;via-tmux-command&#34;&gt;via tmux command&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tmux ls
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scroll&#34;&gt;scroll&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// first
prefix + [ 
//secont
fn + &amp;lt;arrow&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-new-session&#34;&gt;create a new session&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tmux new -s session-name
tmux new
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;attaching-to-an-existing-session&#34;&gt;attaching to an existing session&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tmux a // connect you to the first available session
tmux a -t session-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;detaching-from-a-session&#34;&gt;detaching from a session&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tmux detach
// or shortcut
Ctrl-b d 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;killing-a-session&#34;&gt;killing a session&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tmux kill-session -t session-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;project&#34;&gt;project&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix + option + [arrow key]&lt;/code&gt; adjust the window size&lt;/li&gt;
&lt;li&gt;&lt;code&gt;z&lt;/code&gt; magnify current window&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;configuration&#34;&gt;configuration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;~/.tmux.conf&lt;/li&gt;
&lt;li&gt;see ./tmux.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;windows&#34;&gt;windows&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; create a new window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; rename the current window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; command-prompt &amp;ldquo;move-window -t &amp;lsquo;%%&amp;rsquo;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; list windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; split horizontally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&lt;/code&gt; split vertically&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; change to the next window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; change to the previous window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 to 9&lt;/code&gt; select windows 0 through 9&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; kill window&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;panes&#34;&gt;Panes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; create a horizontal pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&lt;/code&gt; create a vertical pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; show pane numbers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; toggle between panes !!!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}&lt;/code&gt; swap with next pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{&lt;/code&gt; swap with previous pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!&lt;/code&gt; break the pane out of the window / force quit current pane&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; kill the current pane, it&amp;rsquo;s will ask Y/N&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; show pane list&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>如何hack node模块</title>
      <link>//hongxuanlee.github.io/blog/hack_node/</link>
      <pubDate>Fri, 13 Jan 2017 22:08:22 +0800</pubDate>
      
      <guid>//hongxuanlee.github.io/blog/hack_node/</guid>
      <description>

&lt;h3 id=&#34;为何要去hack&#34;&gt;为何要去hack？&lt;/h3&gt;

&lt;p&gt;在业务开发过程中，往往会依赖一些node工具，hack这些node模块的主要目的是在不修改工具源码的情况下，篡改一些特定的功能。可能会是出于以下几种情况的考虑：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;总是存在一些特殊的本地需求，不一定能作为工具的通用需求来暴露正常的API给更多的用户。&lt;/li&gt;
&lt;li&gt;临时且紧急的需求，提PR已经来不及了。&lt;/li&gt;
&lt;li&gt;为什么不直接去改源码？考虑到工具会不定期升级，想使用工具的最新特性，改源码可维护性太差。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;期望&#34;&gt;期望&lt;/h3&gt;

&lt;p&gt;举个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// a.js
module.exports = function(){
    dosomething();
}
// b.js 
module.exports = require(a);
// c.js 
console.log(require(b));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b是你项目c依赖的一个工具模块，b依赖a。希望在某个特定的项目中，b调用a时，a的函数里能多加个方法&lt;code&gt;injectSomething()&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hack之前c的输出
&lt;code&gt;js
function(){
dosomething();
}
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;期望hack能实现的c的输出
&lt;code&gt;js
function(){
injectSomething();
dosomething();
}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;主要方法&#34;&gt;主要方法&lt;/h3&gt;

&lt;h4 id=&#34;利用模块cache篡改模块对象属性&#34;&gt;利用模块cache篡改模块对象属性&lt;/h4&gt;

&lt;p&gt;这是我最早使用的方法，在模块a的类型是object的时候，可以在自己的项目c中提早require 模块a，按照你的需求修改一些属性，这样当模块b再去require 模块a时，从缓存中取出的模块a已经是被修改过的了。&lt;/p&gt;

&lt;p&gt;模块a,b,c栗子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  // a.js
  module.exports = {
    p
  }
  // b.js
  const a = require(a);
  a.p();
  // c.js
  require(b);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我想修改a的方法p,在c中进行如下修改即可，而无需直接去修改工具a、b的源码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   // c.js
   const a = require(a);
   let oldp = a.p; 
   a.p = function(...args){
      injectSomething();
      oldp.apply(this, args);
   }
   require(b)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;缺陷：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在某些模块属性是动态加载的情况，不是那么灵敏，而且只能篡改引用对象。但是大部分情况下还是能够满足需求的。&lt;/p&gt;

&lt;h4 id=&#34;修改require-cache&#34;&gt;修改require.cache&lt;/h4&gt;

&lt;p&gt;在遇到模块暴露的是非对象的情况，就需要直接去修改require的cache对象了。关于修改require.cache的有效性，原理部分会在后面说。先来简单的说下操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   //a.js
   module.exports = function(){
      doSomething();
   }
   //c.js
   const aOld = require(a);
   let aId = require.resolve(aPath);
   require.cache[aId] = function(...args){
      injectSomething();
      aOld.apply(this, args);
   }
   require(b)

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;缺陷：
可能会有人手动去修改require.cache&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;代理require&#34;&gt;代理require&lt;/h4&gt;

&lt;p&gt;这种方法是直接去代理&lt;code&gt;require&lt;/code&gt; ，是最稳妥的方法，但是侵入性相对来说比较强。文件中的require其实是在Module的原型方法上，即&lt;code&gt;Module.prototype.require&lt;/code&gt;。(后面会细说)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Module = require(&#39;module&#39;);
const _require = Module.prototype.require;
Module.prototype.require = function(...args){
    let res = _require.apply(this, args);
    if(args[0] === &#39;xxx&#39;){ // 只修改xxx模块内容
        injectSomething();
    }
    return res;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;缺陷：
对整个node进程的require操作都具有侵入性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;相关原理&#34;&gt;相关原理&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;node在启动的过程中发生了什么？&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;我们先来看看在&lt;code&gt;node a.js&lt;/code&gt;时发生些什么？&lt;a href=&#34;https://github.com/nodejs/node/tree/master&#34;&gt;node源码&lt;/a&gt;
&lt;img src=&#34;https://img.alicdn.com/tfs/TB1QtALNVXXXXbCXXXXXXXXXXXX-720-297.png&#34; alt=&#34;node_main&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图是node运行&lt;code&gt;a.js&lt;/code&gt;的一个核心流程，node的启动程序&lt;code&gt;bootstrap_node.js&lt;/code&gt; 是在 &lt;code&gt;node::LoadEnvironment&lt;/code&gt;中被v8立即执行的，&lt;code&gt;bootstrap_node.js&lt;/code&gt;中的&lt;code&gt;startup()&lt;/code&gt;是包裹在一个匿名函数里面的，所以在一次执行&lt;code&gt;node&lt;/code&gt;的行为中&lt;code&gt;startup()&lt;/code&gt;只会被调用了一次，来保证&lt;code&gt;bootstrap_node.js&lt;/code&gt;的所执行的所有依赖只会被加载一次。LoadEnvironment`立即执行的源码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;  //LoadEnvironment(Environment* env)
  Local&amp;lt;String&amp;gt; script_name = FIXED_ONE_BYTE_STRING(env-&amp;gt;isolate(),&amp;quot; bootstrap_node.js&amp;quot;);
  Local&amp;lt;Value&amp;gt; f_value = ExecuteString(env, MainSource(env), script_name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;bootstrap_node.js&lt;/code&gt;中，会去执行Module的静态方法&lt;code&gt;runMain&lt;/code&gt;，而&lt;code&gt;runMain&lt;/code&gt;中则去执行了&lt;code&gt;Module._load&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  // bootstrap_node.js
  const Module = NativeModule.require(&#39;module&#39;);
  ……
  run(Module.runMain);
  // Module.js
  Module.runMain = function() {
      Module._load(process.argv[1], null, true);
      process._tickCallback();
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;为什么一个进程里只存在一个cache对象？&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;先来看看&lt;code&gt;module._load&lt;/code&gt;干了什么？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Module._load = function(request, parent, isMain) {
  var filename = Module._resolveFilename(request, parent, isMain);
  var cachedModule = Module._cache[filename];
  if (cachedModule) {
    return cachedModule.exports;
  }
  ……
  var module = new Module(filename, parent);
  ……
  Module._cache[filename] = module;
  tryModuleLoad(module, filename);
  return module.exports;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，load的一个模块时，会先读缓存&lt;code&gt;Module._cache&lt;/code&gt;，如果没有就会去new一个Module的实例,
然后再把实例放到缓存里，而&lt;code&gt;Module&lt;/code&gt;在一个node进程调用链路中只会存在一个。&lt;/p&gt;

&lt;p&gt;&lt;b&gt;那么&lt;code&gt;Module._cache&lt;/code&gt;和&lt;code&gt;require.cache&lt;/code&gt;有什么关系呢？&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;可以看下&lt;code&gt;Module.prototype._compile&lt;/code&gt; 这个方法,这里面会对大家写的node文件进行一个包装，注入一些上下文，包括&lt;code&gt;require&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var require = internalModule.makeRequireFunction.call(this);
  var args = [this.exports, require, this, filename, dirname];
  var depth = internalModule.requireDepth;
  var result = compiledWrapper.apply(this.exports, args);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而在&lt;code&gt;internalModule.makeRequireFunction&lt;/code&gt; 我们会发现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // 在makeRequireFunction中
 require.cache = Module._cache;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以，&lt;code&gt;Module._cache&lt;/code&gt;和&lt;code&gt;require.cache&lt;/code&gt;是一样的，那么我们直接修改&lt;code&gt;require.cache&lt;/code&gt;的缓存内容，在一个node进程里是有效的。&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;code&gt;require&lt;/code&gt;不同场景的挂载&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;最开始我以为require是挂载在global上的，于是理所当然用node repl来测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node
&amp;gt; global.require
{ [Function: require]
  resolve: [Function: resolve],
  main: undefined,
  extensions: { &#39;.js&#39;: [Function], &#39;.json&#39;: [Function], &#39;.node&#39;: [Function] },
  cache: {} }
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果以为可以直接代理global.require那就踩坑了，因为如果在文件中使用会发现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(global.require);
// undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上文可知，文件中的&lt;code&gt;require&lt;/code&gt; 其实是来自于&lt;code&gt;Module.prototype._compile&lt;/code&gt; 中注入的&lt;code&gt;Module.prototype.require&lt;/code&gt;, 而最终的指向其实是&lt;code&gt;Module._load&lt;/code&gt;，并没有挂载到module上下文环境中的global对象上。&lt;/p&gt;

&lt;p&gt;于是我尝试在REPL中打印：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node
&amp;gt; global.require === module.require
  false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果有点奇怪，于是去探究了下。在&lt;code&gt;bootstrap_node.js&lt;/code&gt;中找到repl的调用文件&lt;code&gt;repl.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  const require = internalModule.makeRequireFunction.call(module);
  context.module = module;
  context.require = require;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到结论：在repl中，&lt;code&gt;module.require&lt;/code&gt;和&lt;code&gt;global.require&lt;/code&gt; 最终的调用方法是一样的，只是函数指向不同而已。&lt;/p&gt;

&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;path路径&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;require.cache&lt;/code&gt;是一个key、value的map，key看上去是模块所在的绝对路径，然后是不能用绝对路径直接去用的，需要&lt;code&gt;require.resolve&lt;/code&gt;一下来进行转移&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;多进程的情况&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;模块间调用的链路比较长，需要考虑def的入口文件和你需要代理的文件是否在一个进程中，简单的方法就是在入口文件和你需要代理的文件打印pid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(process.pid)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一致，那么直接在入口调用前代理即可，否则情况会更复杂点，需要找到相应的进程调用处进行代理。&lt;/p&gt;

&lt;h3 id=&#34;案例&#34;&gt;案例&lt;/h3&gt;

&lt;h4 id=&#34;篡改输入-prompt&#34;&gt;篡改输入(prompt)&lt;/h4&gt;

&lt;p&gt;场景：某些需要输入的def命令，eg:&lt;code&gt;def add、def p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原因：想一键完成批量创建or批量发布，不想手动输入。&lt;/p&gt;

&lt;p&gt;解决过程：以创建模块为例&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先找到def的入口文件，即一个bin目录下的路径，可以通过这个入口文件不断追溯下去，发现创建模块的generator用的是yeoman-generator的方法.对prompt的方法进行代理。可以将该基础库提前require，更改掉起prompt的方法即可。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;附上示例案例（示例只篡改模块的创建类型,其他的篡改方法类似）：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;#!/usr/bin/env node

&#39;use strict&#39;;

require(&#39;shelljs/global&#39;);
const path = require(&#39;path&#39;);
const HOME = process.env.HOME;

const yeomanRouter = require(path.join(HOME, &#39;.def/def_modules/.generators/@ali/generator-abs-router/node_modules/@ali/generator-abs-router/node_modules/yeoman-generator&#39;));

yeomanRouter.generators.Base.prototype.prompt = function(list, callback) {
  let item = list[0];
  let prop = {};
  prop[item.name] = &#39;rx&#39;; // 让模块类型输入自动为rx
  callback(prop);
};

//require real def path
const defPath = which(&#39;def&#39;).stdout;
require(defPath);

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;篡改dev构建-webpackconfig&#34;&gt;篡改dev构建(webpackconfig)&lt;/h4&gt;

&lt;p&gt;场景：一个kg的组件，需要在本地调试时&lt;code&gt;def dev&lt;/code&gt; 更改一个文件内容。&lt;/p&gt;

&lt;p&gt;原因：一般来说，这种情况可以选择注释代码大法，本地调试时打开注释，发布前干掉。但这样造成代码很不美观，也容易引起误操作。不妨在本地调试的reflect的过程中动态更换掉就好了。&lt;/p&gt;

&lt;p&gt;解决过程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;追溯&lt;code&gt;def dev&lt;/code&gt;调用链路，找到最终reflect的文件, 在这个builder&lt;code&gt;@ali/builder-cake-kpm&lt;/code&gt; 项目里。所使用的webpack的配置项在&lt;code&gt;@ali/cake-webpack-config&lt;/code&gt;下。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;现在就是往webpack配置项里动态注入一个webpack loader的过程了，我需要的loader是一个preLoader，代码非常简单，我把它放在业务项目的文件里:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  module.exports = function(content) {
      return content.replace(&#39;require\(\&#39;\.\/plugin\&#39;\)&#39;, &amp;quot;require(&#39;./localPlugin&#39;)&amp;quot;);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@ali/cake-webpack-config&lt;/code&gt;暴露的是个函数而非对象，所以必须从require下手了，最后附上完整的代理过程：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;#!/usr/bin/env node
&#39;use strict&#39;;

require(&#39;shelljs/global&#39;);
const path = require(&#39;path&#39;);
const HOME = process.env.HOME;
const CWD = process.cwd();

const cakeWcPath = path.join(HOME, &#39;.def/def_modules/.builders/@ali/builder-cake-kpm/node_modules/@ali/builder-cake-kpm/node_modules/@ali/cake-webpack-config&#39;);
const preLoaderPath = path.join(CWD, &#39;debug/plugin_compile.js&#39;) // 注入的loader路径
const cakeWebpackConfig = require(cakeWcPath)
const requireId = require.resolve(cakeWcPath);
require.cache[requireId].exports = (options) =&amp;gt; {
  if (options.callback) {
    let oldCb = options.callback;
    options.callback = function(err, obj) {
      obj.module.preLoaders = [{
        &#39;test&#39;: /index\.js$/,
        &#39;loader&#39;: preLoaderPath
      }];
      oldCb(err, obj);
    }
  }
  cakeWebpackConfig(options);
}

//require real def path
const defPath = which(&#39;def&#39;).stdout;
require(defPath);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>